=============================
Question 1
=============================

if A then false else B
A (λx. λy. y) B

Beta Reductions:
(A (λx. λy. y)) B
((λx. λy. y) B) if A is true
λy. y if A is true
B if A is false

=============================
Question 2
=============================
[A implies (not B)] == [A --> ~B] == (~A v ~B)

(~A v ~B)
= A(λx. λy. y)(λx. λy. x) OR B(λx. λy. y)(λx. λy. x)
= (A(λx.λy.y)(λx.λy.x)) (λx.λy.x) (B(λx.λy.y)(λx.λy.x))
= (A(λy.y))(λx.λy.x)(B(λx.λy.y)(λx.λy.x))
= (A(λy.y))(λx.λy.x)(B(λy.y))
= (A(λy.y))(λy.(B(λy.y)))

=============================
Question 3
=============================

(A OR B) AND NOT (A AND B)
(A (λx. λy. x) B) AND NOT (A B (λx. λy. y))
(A (λx. λy. x) B) AND (A B (λx. λy. y)) (λx. λy. y) (λx. λy. x)
(A (λx. λy. x) B) (A B (λx. λy. y)) (λx. λy. y) (λx. λy. x) (λx. λy. y)

Beta Reductions:
((λx.λy.x) A B) (A B (λx. λy. y)) (λx. λy. y) (λx. λy. x) (λx. λy. y)
((λy.A) B) (A B (λx. λy. y)) (λx. λy. y) (λx. λy. x) (λx. λy. y)
A (A B (λx. λy. y)) (λx. λy. y) (λx. λy. x) (λx. λy. y)
A ((λx.λy.y) A B) (λx. λy. y) (λx. λy. x) (λx. λy. y)
A ((λy.y) B) (λx. λy. y) (λx. λy. x) (λx. λy. y)
A B (λx. λy. y) (λx. λy. x) (λx. λy. y)
A B (λx. λy. y) (λy. (λx. λy. y))
A B (λy. y)
A B

==============================
Question 4
==============================

(a) (3,2) E S
(b) (x,y) E S then (3x–2y,x) E S

Assume (x,y) E S -> ( x=2^(n+1)+1 AND y=2^(n)+1 )

Base Case: (x,y) = (3,2) *given (a)
    x
3=2^(n+1)+1
2=2^(n+1)
2=2*2^(n)
1=2^(n) 
n=0 ------ check
    y
2=2^(n)+1
1=2^(n) 
n=0 ------- check
BASE CASE PROVED
v=3x-2y
w=x
(v,w)=(3x-2y,x) *given (b)
PROVE v=2^(n+1)+1 AND w=2^(n)+1
    v
v=3x-2y
v=3(2^(n+1)+1)-2(2^(n)+1)
v=3(2*2^(n)+1)-2(2^(n)+1)
v=3(2^(n+1))+3-2(2^(n))-2
v=3(2^(n+1))-2^(n+1)+1
v=(3-1)(2^(n+1))+1
v=2(2^(n+1))+1
v=2^(n+2)+1
v=2^(n'+1)+1 where n'=n+1 ------- check
    w
w=x
w=2^(n+1)+1
w=2^(n')+1 where n'=n+1 ------- check

*by structural induction it has been shown that every element of S is of the form (2^(n+1)+1,2^(n)+1) for some integer n

=============================
Question 5
=============================
Prove rev(inorder (reflect x)) = inorder x (*rev for lists*)

Base Case: x = Empty

rev(inorder(reflect Empty))
rev(inorder(Empty))
rev(Empty)
Empty --Base case is proven

Induction Hypothesis:
1. I assume that the formula holds true for subtrees l and r.

Inductive Step:
2. Prove that this holds true for the "next bigger tree" Node(n,l,r)

rev(inorder(reflect Node(n,l,r)))
rev(inorder(Node(n, reflect r, reflect l)))	              -- Definition of reflect in Class20
rev( (inorder (reflect r)) @ [n] @ (inorder (reflect l))) -- Definition of inorder in Class20
rev(inorder(reflect l)) @ [n] @ rev(inorder(reflect r))   -- List reversal
(inorder l) @ [n] @ (inorder r)			                  -- Induction Hypothesis
inorder Node(n, l, r)					                  -- Definition of inorder in Class 20


=============================
Question 6
=============================
Base Case:
For a single node tree x:
preorder(x) = [x]
postorder(x) = [x]
reflect(x) = x
rev([x]) = [x]

Proving - postorder(reflect(x)) = [x] = rev(preorder(x)).

Inductive Step:
preorder(x) = [r] + preorder(L) + preorder(R)
postorder(x) = postorder(L) + postorder(R) + [r]
reflect(x) = A tree with root r, left subtree reflect(R), and right subtree reflect(L)

We need to show:
postorder(reflect(x)) = rev(preorder(x))

Reflecting x:
reflect(x) = Root r, left subtree reflect(R), right subtree reflect(L)

Preorder of reflect(x):
preorder(reflect(x)) = [r] + preorder(reflect(R)) + preorder(reflect(L))

Postorder of reflect(x):
postorder(reflect(x)) = postorder(reflect(R)) + postorder(reflect(L)) + [r]

By the inductive hypothesis:
postorder(reflect(R)) = rev(preorder(R))
postorder(reflect(L)) = rev(preorder(L))


Thus - postorder(reflect(x)) = rev(preorder(R)) + rev(preorder(L)) + [r]

Reversing the preorder of x:
rev(preorder(x)) = rev([r] + preorder(L) + preorder(R))
rev(preorder(x)) = rev(preorder(R)) + rev(preorder(L)) + [r]

Therefore:
postorder(reflect(x)) = rev(preorder(x))

We have now shown that postorder(reflect(x)) = rev(preorder(x)) for all binary trees x.
